CCS PCM C Compiler, Version 4.088, 5967               14-jul-17 13:50

               Filename: C:\Users\Administrator\Desktop\Programs\6\6.lst

               ROM used: 227 words (3%)
                         Largest free fragment is 2048
               RAM used: 33 (9%) at main() level
                         33 (9%) worst case
               Stack:    1 worst case (0 in main + 1 for interrupts)

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   07D
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  MOVF   7B,W
0016:  MOVWF  27
0017:  BCF    03.7
0018:  BCF    03.5
0019:  BTFSS  0B.5
001A:  GOTO   01D
001B:  BTFSC  0B.2
001C:  GOTO   036
001D:  MOVLW  8C
001E:  MOVWF  04
001F:  BTFSS  00.5
0020:  GOTO   023
0021:  BTFSC  0C.5
0022:  GOTO   039
0023:  MOVF   22,W
0024:  MOVWF  04
0025:  MOVF   23,W
0026:  MOVWF  77
0027:  MOVF   24,W
0028:  MOVWF  78
0029:  MOVF   25,W
002A:  MOVWF  79
002B:  MOVF   26,W
002C:  MOVWF  7A
002D:  MOVF   27,W
002E:  MOVWF  7B
002F:  MOVF   20,W
0030:  MOVWF  0A
0031:  SWAPF  21,W
0032:  MOVWF  03
0033:  SWAPF  7F,F
0034:  SWAPF  7F,W
0035:  RETFIE
0036:  BCF    0A.3
0037:  BCF    0A.4
0038:  GOTO   03C
0039:  BCF    0A.3
003A:  BCF    0A.4
003B:  GOTO   053
.................... #include <16f877.h>                    // Selecciona el PIC 
.................... //////// Standard Header file for the PIC16F877 device //////////////// 
.................... #device PIC16F877 
.................... #list 
....................  
.................... #fuses XT,NOWDT,NOPROTECT,PUT,BROWNOUT // Opciones de configuración 
.................... #use delay(clock=20000000)              // Velocidad del Cristal : 4 Mhz 
.................... #use rs232(baud=9600, xmit=PIN_C6, rcv=PIN_C7) // Definición del RS232 
.................... char Keypress=' '; 
*
008E:  MOVLW  20
008F:  BCF    03.5
0090:  MOVWF  28
.................... byte const NInts=153;                   // Numero de interrupciones para 1 Segundo (CALCULADLO)!!!!!!!! 
.................... #define ZERO  0b00111111 
.................... #define UNO  0b00000110 
.................... #define DOS  0b01011011 
.................... #define TRES  0b01001111 
.................... #define CUATRO  0b01100110 
.................... #define CINCO  0b01101101 
.................... #define SEIS  0b01111101 
.................... #define SIETE  0b00000111 
.................... #define OCHO  0b01111111 
.................... #define NUEVE  0b01100111 
....................  
....................  
.................... // VARIABLES GLOBALES 
....................  
.................... int16 C_Ints=0;                         // Contador de Interrupciones ocurridas 
0091:  CLRF   29
0092:  CLRF   2A
.................... char Flag=0;       
0093:  CLRF   2B
.................... int contador = 0;   
0094:  CLRF   2C
.................... int num[10] = {ZERO,UNO,DOS,TRES,CUATRO,CINCO,SEIS,SIETE,OCHO,NUEVE};    
0095:  MOVLW  3F
0096:  MOVWF  2D
0097:  MOVLW  06
0098:  MOVWF  2E
0099:  MOVLW  5B
009A:  MOVWF  2F
009B:  MOVLW  4F
009C:  MOVWF  30
009D:  MOVLW  66
009E:  MOVWF  31
009F:  MOVLW  6D
00A0:  MOVWF  32
00A1:  MOVLW  7D
00A2:  MOVWF  33
00A3:  MOVLW  07
00A4:  MOVWF  34
00A5:  MOVLW  7F
00A6:  MOVWF  35
00A7:  MOVLW  67
00A8:  MOVWF  36
.................... int x = 1;           // Flag que cambia cada NInts interrupciones 
00A9:  MOVLW  01
00AA:  MOVWF  37
.................... int v = 0; 
00AB:  CLRF   38
....................  
....................  
.................... #int_RTCC                              // Interrupción por desbordamiento 
.................... void RTCC_isr() {                           // del TIMER0 RTCC 
....................  
....................   if(C_Ints > NInts){                  // Si las ints ocurridas > ints para 1 Seg. 
*
003C:  MOVF   2A,F
003D:  BTFSS  03.2
003E:  GOTO   043
003F:  MOVF   29,W
0040:  SUBLW  99
0041:  BTFSC  03.0
0042:  GOTO   04C
....................  
....................     if(Flag==0){ 
0043:  MOVF   2B,F
0044:  BTFSS  03.2
0045:  GOTO   049
....................       Flag=1; 
0046:  MOVLW  01
0047:  MOVWF  2B
....................     } 
....................     else{ 
0048:  GOTO   04A
....................       Flag=0; 
0049:  CLRF   2B
....................     } 
....................     C_Ints=0;                          // Reinicializo Contador de Ints 
004A:  CLRF   2A
004B:  CLRF   29
....................   } 
....................   ++C_Ints;                            // Incremento el número de interrupciones 
004C:  INCF   29,F
004D:  BTFSC  03.2
004E:  INCF   2A,F
.................... }                                      // Ocurridas 
....................  
004F:  BCF    0B.2
0050:  BCF    0A.3
0051:  BCF    0A.4
0052:  GOTO   023
.................... #int_rda 
.................... void serial_isr() { 
....................  
....................   Keypress=0x00; 
0053:  CLRF   28
....................   if(kbhit()){ 
0054:  BTFSS  0C.5
0055:  GOTO   079
....................     Keypress=getc(); 
0056:  BTFSS  0C.5
0057:  GOTO   056
0058:  MOVF   1A,W
0059:  MOVWF  28
....................     if(Keypress!=0x00){ 
005A:  MOVF   28,F
005B:  BTFSC  03.2
005C:  GOTO   079
....................     if(Keypress == 'a'){ 
005D:  MOVF   28,W
005E:  SUBLW  61
005F:  BTFSS  03.2
0060:  GOTO   065
....................          contador = 0; 
0061:  CLRF   2C
....................          x=1; 
0062:  MOVLW  01
0063:  MOVWF  37
....................          v=0; 
0064:  CLRF   38
....................     } 
....................     if(Keypress == 'b'){ 
0065:  MOVF   28,W
0066:  SUBLW  62
0067:  BTFSS  03.2
0068:  GOTO   06F
....................          contador = 10; 
0069:  MOVLW  0A
006A:  MOVWF  2C
....................          x=-1; 
006B:  MOVLW  FF
006C:  MOVWF  37
....................          v=1; 
006D:  MOVLW  01
006E:  MOVWF  38
....................     } 
....................     if(Keypress == 'c'){ 
006F:  MOVF   28,W
0070:  SUBLW  63
0071:  BTFSS  03.2
0072:  GOTO   074
....................          x=0; 
0073:  CLRF   37
....................     } 
....................       putchar(keypress); 
0074:  MOVF   28,W
0075:  BTFSS  0C.4
0076:  GOTO   075
0077:  MOVWF  19
....................       keypress=0x00; 
0078:  CLRF   28
....................     } 
....................   } 
.................... } 
....................  
0079:  BCF    0C.5
007A:  BCF    0A.3
007B:  BCF    0A.4
007C:  GOTO   023
.................... void main(void) { 
007D:  CLRF   04
007E:  BCF    03.7
007F:  MOVLW  1F
0080:  ANDWF  03,F
0081:  MOVLW  81
0082:  BSF    03.5
0083:  MOVWF  19
0084:  MOVLW  A6
0085:  MOVWF  18
0086:  MOVLW  90
0087:  BCF    03.5
0088:  MOVWF  18
0089:  BSF    03.5
008A:  BSF    1F.0
008B:  BSF    1F.1
008C:  BSF    1F.2
008D:  BCF    1F.3
....................   char K; 
....................   K=Flag; 
*
00AC:  MOVF   2B,W
00AD:  MOVWF  39
....................   setup_counters(RTCC_INTERNAL,RTCC_DIV_128);// TIMER0: Clock Interno, Presescaler 128 
00AE:  BSF    03.5
00AF:  MOVF   01,W
00B0:  ANDLW  C0
00B1:  IORLW  06
00B2:  MOVWF  01
00B3:  CLRWDT
....................   enable_interrupts(INT_RTCC);               // Habilito Interrupción RTCC 
00B4:  BCF    03.5
00B5:  BSF    0B.5
....................   enable_interrupts(global);  
00B6:  MOVLW  C0
00B7:  IORWF  0B,F
....................   enable_interrupts(int_rda);// Habilito Interrupciones 
00B8:  BSF    03.5
00B9:  BSF    0C.5
....................  
....................  
....................  
....................   do{ // Bucle infinito 
....................  
....................     if(Flag==K){} 
00BA:  BCF    03.5
00BB:  MOVF   39,W
00BC:  SUBWF  2B,W
00BD:  BTFSC  03.2
....................     else 
00BE:  GOTO   0E1
....................     {                                        // si ha cambiado Flag ... 
....................       contador= contador + (x); 
00BF:  MOVF   37,W
00C0:  ADDWF  2C,F
....................       output_d(num[contador]); 
00C1:  MOVLW  2D
00C2:  ADDWF  2C,W
00C3:  MOVWF  04
00C4:  BCF    03.7
00C5:  MOVF   00,W
00C6:  MOVWF  3A
00C7:  BSF    03.5
00C8:  CLRF   08
00C9:  BCF    03.5
00CA:  MOVF   3A,W
00CB:  MOVWF  08
....................       if(v=1){ 
00CC:  MOVLW  01
00CD:  MOVWF  38
00CE:  MOVF   38,F
00CF:  BTFSC  03.2
00D0:  GOTO   0D6
....................       if(contador >= 9){ 
00D1:  MOVF   2C,W
00D2:  SUBLW  08
00D3:  BTFSC  03.0
00D4:  GOTO   0D6
....................          contador=0; 
00D5:  CLRF   2C
....................       } 
....................       } 
....................       if(v=0){ 
00D6:  CLRF   38
00D7:  MOVF   38,F
00D8:  BTFSC  03.2
00D9:  GOTO   0DF
....................       if(contador == 0){ 
00DA:  MOVF   2C,F
00DB:  BTFSS  03.2
00DC:  GOTO   0DF
....................          contador=10; 
00DD:  MOVLW  0A
00DE:  MOVWF  2C
....................       } 
....................       } 
....................        
....................       K=Flag;                                // Guardo estado anterior de Flag 
00DF:  MOVF   2B,W
00E0:  MOVWF  39
....................     } 
....................  
....................   }While(TRUE); 
.................... } 
00E1:  GOTO   0BB
....................  
00E2:  SLEEP

Configuration Fuses:
   Word  1: 3F71   XT NOWDT PUT NOPROTECT BROWNOUT NOLVP NOCPD NOWRT NODEBUG
